{
  "name": "Flask-zipkin",
  "tagline": "",
  "body": "# flask-zipkin\r\n\r\na flask zipkin extesion based on py_zipkin.\r\n\r\n## Installation\r\n\r\n```bash\r\npip install flask_zipkin\r\n```\r\n\r\n## usage\r\n\r\nyou can simply use it as other flask extensions.\r\n\r\n```python\r\nfrom flask_zipkin import Zipkin\r\n\r\nzipkin = Zipkin(sample_rate=10)\r\nzipkin.init_app(app)\r\n```\r\n\r\n## Advance Usage\r\n\r\nyou could gen a header to pass it to other services, the downstream service will recieve this header.\r\n\r\n```\r\n@bp.route('/')\r\ndef hello():\r\n    headers = {}\r\n    headers.update(zipkin.create_http_headers_for_new_span())\r\n    r = requests.get('http://localhost:5001', headers=headers)\r\n    return r.text\r\n```\r\n\r\n\r\n\r\n`flask_zipkin` will use http transport by default. You could define a transport, like:\r\n\r\n```python\r\n@zipkin.transport_handler\r\ndef default_handler(self, encoded_span):\r\n    body = str.encode('\\x0c\\x00\\x00\\x00\\x01') + encoded_span\r\n    return requests.post(\r\n\t\t'your transport dsn',\r\n        data=body,\r\n        headers={'Content-Type': 'application/x-thrift'},\r\n)\r\n```\r\n\r\nand also, you could exempt some views, like:\r\n\r\n```python\r\n@zipkin.exempt\r\n@bp.route('/')\r\ndef hello():\r\n    return 'hello world'\r\n```\r\n\r\n## app configs\r\n\r\n`ZIPKIN_DISABLE`  disable zipkin tracking if value is `True`\r\n\r\n`ZIPKIN_DSN`  http transport dsn: such as `http://localhost:9411/api/v1/spans`",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}